// <auto-generated />
using System;
using Methodist_API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Methodist_API.Migrations
{
    [DbContext(typeof(MKDbContext))]
    [Migration("20250402091724_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Methodist_API.Models.DB.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("DateOfEvent")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_of_event");

                    b.Property<DateTime>("EndDateOfEvent")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("end_date_of_event");

                    b.Property<string>("FormOfEvent")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("form_of_event");

                    b.Property<string>("FormOfParticipation")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("form_of_participation");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean")
                        .HasColumnName("is_approoved");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_checked");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("location");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid")
                        .HasColumnName("profile_id");

                    b.Property<string>("QuantityOfHours")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("quantity_of_hours");

                    b.Property<string>("Result")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("result");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("status");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("type");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("TypeId");

                    b.ToTable("events", (string)null);
                });

            modelBuilder.Entity("Methodist_API.Models.DB.FileEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid")
                        .HasColumnName("event_id");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("file_name");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("file_events", (string)null);
                });

            modelBuilder.Entity("Methodist_API.Models.DB.MethodicalСommittee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<Guid?>("HeadId")
                        .HasColumnType("uuid")
                        .HasColumnName("head_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.HasIndex("HeadId");

                    b.ToTable("methodical_committees", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("52c00ef1-4a3d-4995-a842-eb525fe82aef"),
                            Name = "Математических и естественно - научных дисциплин"
                        },
                        new
                        {
                            Id = new Guid("12b926c0-2e39-4d06-a588-1f8f018622a9"),
                            Name = "Гуманитарных дисциплин"
                        },
                        new
                        {
                            Id = new Guid("49dcb840-1885-4a19-87d6-8c0fa80fede7"),
                            Name = "Иностранного языка"
                        },
                        new
                        {
                            Id = new Guid("cc476f29-7419-4254-aa5c-7d869a21bbe9"),
                            Name = "Дисциплин физической культуры и БЖД"
                        },
                        new
                        {
                            Id = new Guid("f778fac4-7fff-4f7b-a8a1-49a07640acab"),
                            Name = "Общественных и правовых дисциплин"
                        },
                        new
                        {
                            Id = new Guid("d793c1bb-9082-4367-8789-53ff550057cc"),
                            Name = "Информатика и вычислительная техника"
                        },
                        new
                        {
                            Id = new Guid("97c70cce-7639-4154-b84d-8cc94593820b"),
                            Name = "Экономика и управление, логистика"
                        },
                        new
                        {
                            Id = new Guid("5d22e938-b4fc-4044-be1b-00bc654becdb"),
                            Name = "Специальностей Товароведение, Коммерция"
                        },
                        new
                        {
                            Id = new Guid("707b476f-0905-41ba-8dea-f32fea287448"),
                            Name = "Специальностей Банковское дело, ДОУ"
                        },
                        new
                        {
                            Id = new Guid("c2d0d4dc-35ce-4d37-b0ec-462eae895980"),
                            Name = "Инструментальных дисциплин"
                        },
                        new
                        {
                            Id = new Guid("4e3f28ce-029a-40d5-a02a-765d72f35bfe"),
                            Name = "Музыкальных дисциплин"
                        },
                        new
                        {
                            Id = new Guid("574378fc-b335-4466-84ab-b15441e3b3bb"),
                            Name = "Специальности Дошкольное образование"
                        },
                        new
                        {
                            Id = new Guid("67f33b56-53ba-4609-9423-ca5565996262"),
                            Name = "Специальности Преподавание в начальных классах"
                        });
                });

            modelBuilder.Entity("Methodist_API.Models.DB.Profile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name");

                    b.Property<Guid?>("MC_id")
                        .HasColumnType("uuid")
                        .HasColumnName("MC_id");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("patronymic");

                    b.HasKey("Id");

                    b.HasIndex("MC_id");

                    b.ToTable("profiles", (string)null);
                });

            modelBuilder.Entity("Methodist_API.Models.DB.TypeOfEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("type_of_events", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec2d1d7b-4cb7-41e1-aa80-74f695fea627"),
                            Name = "Проведение"
                        },
                        new
                        {
                            Id = new Guid("638ea3fe-b998-4a6e-a06e-3331597e34b8"),
                            Name = "Участие"
                        },
                        new
                        {
                            Id = new Guid("5ce9f584-6fea-41e9-9a64-4ab4d9d09e84"),
                            Name = "Публикация"
                        },
                        new
                        {
                            Id = new Guid("01f2e985-5066-4a1c-bc51-5c46b6b20362"),
                            Name = "Стажировка"
                        });
                });

            modelBuilder.Entity("Methodist_API.Models.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Methodist_API.Models.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("f47ac10b-58cc-4372-a567-0e02b2c3d479"),
                            ConcurrencyStamp = "f47ac10b-58cc-4372-a567-0e02b2c3d479",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("c9eb182b-1c3e-4c3b-8c3e-1c3e4c3b8c3e"),
                            ConcurrencyStamp = "c9eb182b-1c3e-4c3b-8c3e-1c3e4c3b8c3e",
                            Name = "Teacher",
                            NormalizedName = "TEACHER"
                        });
                });

            modelBuilder.Entity("Methodist_API.Models.Identity.UserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("DeviceId")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name", "DeviceId");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", null, t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Methodist_API.Models.DB.Event", b =>
                {
                    b.HasOne("Methodist_API.Models.DB.Profile", "Profile")
                        .WithMany("Events")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Methodist_API.Models.DB.TypeOfEvent", "TypeOfEvent")
                        .WithMany("Events")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("TypeOfEvent");
                });

            modelBuilder.Entity("Methodist_API.Models.DB.FileEvent", b =>
                {
                    b.HasOne("Methodist_API.Models.DB.Event", "Event")
                        .WithMany("FileEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Methodist_API.Models.DB.MethodicalСommittee", b =>
                {
                    b.HasOne("Methodist_API.Models.DB.Profile", "Profile")
                        .WithMany("MethodicalСommittees")
                        .HasForeignKey("HeadId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Methodist_API.Models.DB.Profile", b =>
                {
                    b.HasOne("Methodist_API.Models.Identity.AppUser", "AppUser")
                        .WithOne("ProfileNavigation")
                        .HasForeignKey("Methodist_API.Models.DB.Profile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Methodist_API.Models.DB.MethodicalСommittee", "MethodicalСommittee")
                        .WithMany("Profiles")
                        .HasForeignKey("MC_id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("AppUser");

                    b.Navigation("MethodicalСommittee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Methodist_API.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Methodist_API.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Methodist_API.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Methodist_API.Models.Identity.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Methodist_API.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Methodist_API.Models.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Methodist_API.Models.DB.Event", b =>
                {
                    b.Navigation("FileEvents");
                });

            modelBuilder.Entity("Methodist_API.Models.DB.MethodicalСommittee", b =>
                {
                    b.Navigation("Profiles");
                });

            modelBuilder.Entity("Methodist_API.Models.DB.Profile", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("MethodicalСommittees");
                });

            modelBuilder.Entity("Methodist_API.Models.DB.TypeOfEvent", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Methodist_API.Models.Identity.AppUser", b =>
                {
                    b.Navigation("ProfileNavigation")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
